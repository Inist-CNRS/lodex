append = dump
label = json-conditor

# load some plugins to activate some statements
[use]
plugin = basics

# Parse input file
[unpack]

[assign]
path = lodexStampImportedDate
value = fix(new Date()).thru(d => d.toDateString())
path = lodexStampUsedParser
value = env('parser')
path = lodexStampUploadedFilename
value = env('source')
path = lodexStampQueryInstitute
value = env('source').split("-").last().split("_").head().toUpper()


[assign]
path = lodexStampQueryYear
value = get('lodexStampUploadedFilename').split("_").get(2)

# Supprime les notices dont l'année de publication retenue ne correspond pas à l'année requêtée.
[remove]
test = get("ApilPublicationDate").thru(year => year !== self.lodexStampQueryYear)


[replace]

path = lodexStampImportedDate
value = get('lodexStampImportedDate')
path = lodexStampUsedParser
value = get('lodexStampUsedParser')
path = lodexStampUploadedFilename
value = get('lodexStampUploadedFilename')
path = lodexStampQueryInstitute
value = get('lodexStampQueryInstitute')
path = lodexStampQueryYear
value = get('lodexStampQueryYear')

path = abstract/default
value = get("abstract.default")

path = sourceUidChain
value = get("sourceUidChain")

path = authors
value = get("authors")

path = doi
value = get("doi")

path = enrichments/openAccess/unpaywall/oaStatus
value = get("enrichments.openAccess.unpaywall.oaStatus")

path = enrichments/openAccess/unpaywall/hasRepositoryCopy
value = get("enrichments.openAccess.unpaywall.hasRepositoryCopy")

path = enrichments/openAccess/unpaywall/isOa
value = get("enrichments.openAccess.unpaywall.isOa")

path = enrichments/openAccess/unpaywall/oaLocations
value = get("enrichments.openAccess.unpaywall.oaLocations")

path = fulltextUrl
value = get("fulltextUrl")

path = halId
value = get("halId")

path = host/issn
value = get("host.issn")

path = host/eissn
value = get("host.eissn")

path = host/isbn
value = get("host.isbn")

path = host/language
value = get("host.language")

path = host/conference/date
value = get("host.conference.date")

path = host/conference/country
value = get("host.conference.country")

path = host/conference/name
value = get("host.conference.name")

path = host/conference/place
value = get("host.conference.place")

path = keywords/en/author
value = get("keywords.en.author")

path = keywords/en/mesh
value = get("keywords.en.mesh")

path = keywords/fr/author
value = get("keywords.fr.author")

path = keywords/fr/mesh
value = get("keywords.fr.mesh")

path = pmId
value = get("pmId")

path = title/default
value = get("title.default")

path = funders
value = get("funders")

path = ApilPublicationDate
value = get("ApilPublicationDate")

path = ApilFinancement
value = get("ApilFinancement")

path = ApilRnsrProvisoire
value = get("ApilRnsr")

path = ApilWsSigleLaboIntitule
value = get("ApilWsSigleLaboIntitule")

path = ApilWsLaboIntituleProvisoire
value = get("ApilWsLaboIntitule").map(item=>_.deburr(String(item))).map(item=>item.replace(/ (\([^\]]+\))/gmi,"")).map(item=>_.toUpper(String(item)))

path = ApilWsInstitutCnrsProvisoire
value = get("ApilWsInstitutCnrs")

path = ApilWsIsCnrs
value = get("ApilWsIsCnrs")

path = ApilWsTypeDoc
value = get("ApilWsTypeDoc")

path = ApilWsSource
value = get("ApilWsSource")

path = ApilWsPublisher
value = get("ApilWsPublisher")

path = ApilWsCodeISO
value = get("ApilWsCodeISO")

path = ApilWsCountry
value = get("ApilWsCountry")

path = ApilOaLocation
value=get("enrichments.openAccess.unpaywall.oaLocations").map("hostType").replace(/^$/,"OA - Non").split(",").concat([self.fulltext].map((value)=>value && value.replace(/.*http.*/,"repository"))).uniq().filter((value, index, collection)=>{if(!(value === "OA - Inconnu" && collection[index+1] === "repository" )){return true}}).compact()

path=ApilVoieDacces
value=get("ApilOaLocation").sort().replace("repository","Archive seule").replace("publisher","Editeur seul").replace("Editeur seul,Archive seule","Commun")

path=ApilOaLocationsHal
value=get("ApilOaLocationsHal").join(",").replace(/^$/,"OA - Non").split(",")

path=ApilOaStatusHal
value=get("ApilOaStatusHal")

path=ApilIsOaHal
value=get("ApilOaStatusHal","OA - Inconnu").replace("Closed","OA - Non").replace(/^((?!OA).)*$/,"OA - Oui")

path=ApilTypeDaccesHal
value=get("ApilOaLocationsHal").sort().replace("repository","Archive seule").replace("publisher","Editeur seul").replace("Editeur seul,Archive seule","Commun").replace(/^$/,"OA - Non")

path=ApilOaStatusDiamond
value=get("ApilOaStatusDiamond").replace("Closed,Green","Green")

path=ApilOaStatusDiamondHal
value=get("ApilOaStatusDiamondHal").replace("Closed,Green","Green")

path=ApilWsDr
value=get("ApilWsDr").flatten().map(item=>item.replace(/^(?!DR).*$/,"")).compact().union()

path = ApilProvenance
value = get("ApilProvenance")

path = ApilCollation
value = get("ApilCollation")

path= WsLoterre
value=get("ws.loterre2xk")

[assign]
path = uri
value = get('sourceUidChain')

#on le transforme en une valeur acceptable par lodex
[map]
path = uri

[map/replace]
path = uri
value = self().replace(/:/g, '=')

[map/identify]
scheme = sha

[map/exchange]
value = get('uri').replace('sha:/', 'uri:/')

[assign]
path = uri
value = get('uri').join('')

[assign]
path=ZipLaboRnsrInstitut
value=zip(self.ApilWsLaboIntituleProvisoire,self.ApilRnsrProvisoire,self.ApilWsInstitutCnrsProvisoire).filter(subArray => !subArray.some(item => item === "200612821P" || item=== "200018571R" || item=== "199812965F" || item=== "201523784S"))

[assign]
path=ApilWsLaboIntitule
value=get("ZipLaboRnsrInstitut").map(subArray => subArray[0])

[assign]
path=ApilRnsr
value=get("ZipLaboRnsrInstitut").map(subArray => subArray[1])

[assign]
path=ApilWsInstitutCnrs
value=get("ZipLaboRnsrInstitut").map(subArray => subArray[2])

[assign]
path=InstitForZip
value=get("ApilWsInstitutCnrs").map(item=>item.split(";"))

[assign]
path=ApilGraphSourceEditeurIsOa
value=get("enrichments.openAccess.unpaywall.isOa").replace(true,"Oui").replace(false,"Non").replace(/^$/,"null").prepend("OA=").append(("; TypeAcces="+self.ApilTypeDaccesHal).replace(/Commun|Editeur seul/g,"Editeur").replace(/OA - Non|Archive seule|OA - Inconnu/g,"null"))

[assign]
path=ApilGraphSourceEditeurIsOaHal
value=get("ApilIsOaHal").replace(/^((?!Oui).)*$/,"null").prepend("OA=").append(("; TypeAcces="+self.ApilTypeDaccesHal).replace(/Commun|Editeur seul/g,"Editeur").replace(/OA - Non|Archive seule|OA - Inconnu/g,"null"))


#[exchange]
#value = omit(['ws'])

# Aplatit la structure, pour avoir le même comportement que le loader
[OBJFlatten]
separator = fix('/')
safe = true

# Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

# Prevent keys from containing dot path notation (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('.')
reverse = true
safe = true

# Uncomment to see each data sent to the database
#[debug]

[assign]
path = uri
value = get('uri').trim()

#Script pour filtrer les intitulés de labo ayant une affiliation princpale à l'institut 

#On modifie le tableau ApilWsInstitutCnrs qui contient des séparateurs dans des string.Chaque institut devient donc un string à part entière, transformation nécéssaire pour créer une matrice utilisée dans le _.zip ultérieur
#Le _.zip créé une matrice où chaque tableau aggrège un string labo intitulé à un tableau d'instituts. On joint puis découpe ensuite pour ne plus avoir qu'un seul tableau avec le labo puis tous ses instituts. On découpe dans chaque tableau son 1er élément (le labo) et on parcours le second tableau pour chercher l'institut ciblé, s'il est trouvé on obtient le 1er tableau en résultat soit l'intitulé du labo.

[assign]
path=ApilLaboPrincipal
value=zip(self.ApilWsLaboIntitule,self.InstitForZip).map(item=>item.join(",").split(",")).reduce((result, item) =>{if (item.slice(1).some(element => element === `${self.lodexStampQueryInstitute} (P)`)) {result.push(item[0])}return result}, [])


#value=zip(self.ApilWsLaboIntitule,self.ApilWsInstitutCnrs).reduce((result, item) => {if (item.slice(1).some(element => element === `${self.lodexStampQueryInstitute} (P)`)) {result.push(item[0])}return result}, [])


#! Script pour filtrer les intitulés de labo ayant une affiliation secondaire à l'institut
[assign]
path=ApilLaboSecondaire
value=zip(self.ApilWsLaboIntitule,self.InstitForZip).map(item=>item.join(",").split(",")).reduce((result, item) =>{if (item.slice(1).some(element => element === `${self.lodexStampQueryInstitute} (S)`)) {result.push(item[0])}return result}, [])


#value=zip(self.ApilWsLaboIntitule,self.ApilWsInstitutCnrs).reduce((result, item) => {if (item.slice(1).some(element => element === `${self.lodexStampQueryInstitute} (S)`)) {result.push(item[0])}return result}, [])

[assign]
path=ApilLaboInstitut
value=zip(self.ApilLaboPrincipal,self.ApilLaboSecondaire).flatten().compact()

#Ajout d'un champ pour expurger tous les instituts non pertinents
[assign]
path=FiltreInstitut
value=get("ApilWsInstitutCnrs").split(";").split(",").map(s=>s.replace(/ (\([^\]]+\))/,"")).filter(x => [self.lodexStampQueryInstitute].includes(x)).thru(array => Boolean(array.length))

[remove]
test=get("FiltreInstitut").isEqual(false)

#[exchange]
#omit["FiltreInstitut"]
