append = pack
label = json-conditor

# load some plugins to activate some statements
[use]
plugin = basics

# Toggle ezs traces (see server stderr log)
[debug]
ezs = false

# Parse input file
[unpack]

# champs minimaux
[replace]
path = abstract/default
value = get("abstract.default")

path = authors
value = get("authors")

path = doi
value = get("doi")

path = enrichments/openAccess/unpaywall/oaStatus
value = get("enrichments.openAccess.unpaywall.oaStatus")

path = enrichments/openAccess/unpaywall/hasRepositoryCopy
value = get("enrichments.openAccess.unpaywall.hasRepositoryCopy")

path = enrichments/openAccess/unpaywall/isOa
value = get("enrichments.openAccess.unpaywall.isOa")

path = enrichments/openAccess/unpaywall/oaLocations
value = get("enrichments.openAccess.unpaywall.oaLocations")

path = halId
value = get("halId")

path = host/issn
value = get("host.issn")

path = host/eissn
value = get("host.eissn")

path = host/isbn
value = get("host.isbn")

path = host/language
value = get("host.language")

path = host/conference/date
value = get("host.conference.date")

path = host/conference/country
value = get("host.conference.country")

path = host/conference/name
value = get("host.conference.name")

path = host/conference/place
value = get("host.conference.place")

path = keywords/en/author
value = get("keywords.en.author")

path = keywords/en/mesh
value = get("keywords.en.mesh")

path = keywords/fr/author
value = get("keywords.fr.author")

path = keywords/fr/mesh
value = get("keywords.fr.mesh")

path = pmId
value = get("pmId")

path = title/default
value = get("title.default")

path = funders
value = get("funders")

# Champs créés dans le dump
path = ApilPublicationDate
value = get("ApilPublicationDate")

path = ApilFinancement
value = get("ApilFinancement")

path = ApilRnsr
value = get("ApilRnsr")

path = ApilWsSigleLaboIntitule
value = get("ApilWsSigleLaboIntitule")

path = ApilWsInstitutCnrs
value = get("ApilWsInstitutCnrs")

path = ApilWsIsCnrs
value = get("ApilWsIsCnrs")

path = ApilWsTypeDoc
value = get("ApilWsTypeDoc")

path = ApilWsSource
value = get("ApilWsSource")

path = ApilWsPublisher
value = get("ApilWsPublisher")

path = ApilWsCodeISO
value = get("ApilWsCodeISO")

path = ApilWsCountry
value = get("ApilWsCountry")

# 05-future-loader
path = ApilCollation
value = get("host.volume").concat(_.get(self,"host.issue")).concat(_.get(self,"host.pages.range")).join(" / ")

path = ApilProvenance
value = get("sourceUids").castArray().map(s => s.split("$")[0]).uniq()

path = uri
value = get('sourceUids').join('~')

[identify]
scheme = sha

[assign]
path = uri
value = get('uri').replace('sha:/', 'uri:/')

[exchange]
value = omit(['ws'])

# Aplatit la structure, pour avoir le même comportement que le loader
[OBJFlatten]
separator = fix('/')
safe = true

# Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

# Prevent keys from containing dot path notation (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('.')
reverse = true
safe = true

# Uncomment to see each data sent to the database
#[debug]

# Add contextual metadata related to the import
[assign]
path = lodexStamp.importedDate
value = fix(new Date()).thru(d => d.toDateString())
path = lodexStamp.usedParser
value = env('parser')
path = lodexStamp.uploadedFilename
value = env('source')
path = uri
value = get('uri').trim()
