append = dump
label = json-conditor

; load some plugins to activate some statements
[use]
plugin = basics

# Parse input file
[unpack]

[assign]
path = lodexStamp.ImportedDate
value = fix(new Date()).thru(d => new Intl.DateTimeFormat('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' }).format(d))
path = lodexStamp.UsedParser
value = env('parser')
path = lodexStamp.UploadedFilename
value = env('source')
path = lodexStamp.QueryInstitute
value = env('source').split("-").last().split("_").head().toUpper()

[assign]
path = lodexStamp.QueryYear
value = get('lodexStamp.UploadedFilename').split("_").get(2)

; Supprime les notices dont l'année de publication retenue ne correspond pas à l'année requêtée.
[remove]
test = get("publicationYear").thru(year => year !== self.lodexStamp.QueryYear)
; Supprime les notices qui ne sont pas "CNRS"
[remove]
test = get("isCnrs").isEqual("Non")
; Supprime les notices qui n'ont pas l'institut requêté dans la liste des instituts principaux.
[remove]
test = get("institutsPrincipaux").thru(array => !_.includes(array, self.lodexStamp.QueryInstitute))

[assign]
path = uri
value = get('sourceUidChain')

; on le transforme en une valeur acceptable par lodex
[map]
path = uri

[map/replace]
path = uri
value = self().replace(/:/g, '=')

[map/identify]
scheme = sha

[map/exchange]
value = get('uri').replace('sha:/', 'uri:/')

[assign]
path = uri
value = get('uri').join('')


; Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

; Uncomment to see each data sent to the database
;[debug]

[assign]
path = uri
value = get('uri').trim()
