append = pack
label = skos

# load some plugins to activate some statements
[use]
plugin = basics
plugin = storage

[XMLParse]
separator = /RDF/*
separator = /rdf:RDF/*

[replace]
path = id
value = get('rdf$about')
path = value
value = self()

[env]
path = identifier
value = fix(`PID${Date.now()}`)

# On analyse 2 fois le fichier reçu
[overturn]
path = value
location = env('location', '/tmp/skos')

; Premier passage on stocke toutes ressources dans un index
[overturn/swing]
test  = get('token.1').isEqual(0)
[overturn/swing/save]
location = env('location', '/tmp/skos')
domain = env('identifier', 'concepts')
path = value.rdf$about

; Second passage on va essayer de resoudre les liens avec les ressources stockées lors du premier passage
[overturn/swing]
test  = get('token.1').isEqual(1)
[overturn/swing/map]
path = value

; liste des champs qui peuvent contenir un lien vers une autre ressource
[overturn/swing/map/assign]
path = pathToResolve
value = self().keys().filter(x => (x.search(/rdf\$resource/) !== -1)).concat(['skos$inScheme', 'skos$related', 'skos$narrower', 'skos$broader', 'skos$member']).uniq()

; On boucle sur la liste des champs à résoudre (cad rempalcer l'identifier par le contenu)
[overturn/swing/map/loop]
test = get('pathToResolve').isEmpty()
reverse = true
; on passe tout en tableau (plus simple à gérer)
[overturn/swing/map/loop/map]
path = get('pathToResolve.0')
; on chercher dans l'index si la ressource y est
[overturn/swing/map/loop/map/load]
location = env('location', '/tmp/skos')
domain = env('identifier', 'concepts')
path = rdf$resource
target = rdf$resource
; on simplifie l'objet produit
[overturn/swing/map/loop/map/exchange]
value = get('rdf$resource.value')
[overturn/swing/map/loop/assign]
path = pathToResolve
value = get('pathToResolve').drop()

[exchange]
value = get('value').castArray().head().omit(['pathToResolve'])

; on supprimer les ressources qui ne sont pas des concepts
[remove]
test = self().keys().indexOf('skos$prefLabel').isEqual(-1)

[assign]
path = uri
value = get('rdf$about')

# Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

# Ignore objects with duplicate URI
[dedupe]
ignore = true

# Prevent keys from containing dot path notation (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('.')
reverse = true
safe = true

# Prevents keys from containing the $ character (which is forbidden by nodejs mongoDB driver)
[exchange]
;value = self().mapKeys((value, key) => key.replace(/\$/g, '_'))
value = fix(JSON.parse(JSON.stringify(self), (k, v) => _.isPlainObject(v) ? _.mapKeys(v, (value, key) => key.replace(/\$/g, '_')) : v))

# Uncomment to see each data sent to the database
#[debug]

# Add contextual metadata related to the import
[assign]
path = lodexStamp.importedDate
value = fix(new Date()).thru(d => d.toDateString())
path = lodexStamp.usedParser
value = env('parser')
path = lodexStamp.uploadedFilename
value = env('source')
path = uri
value = get('uri').trim()

