append = pack
label = json-protege

# load some plugins to activate some statements
[use]
plugin = basics
plugin = analytics

# Toggle ezs traces (see server stderr log)
[debug]
ezs = false

[JSONParse]
separator = *

[bufferize]
path = bufferID

[env]
path = bufferID
value = get('bufferID')

; BEGIN (expand onProperty) {
[expand]
path = http://www.w3.org/2002/07/owl#onProperty
;file = ./json-protege-resolver.ini ; inline statements, it's more verbose but it's self-sufficient
[expand/exploding]
[expand/combine]
path = value.@id
primer = env('bufferID')
prepend = buffers
persistent = true

[expand/combine/replace]
path = id
value = get('@id')
path = value
value = self().omit('bufferID')

[expand/replace]
path = id
value = get('id')
path = value
value = get('value.@id.value').mapValues((o) => Array.isArray(o) && o.length === 1 ? o.pop() : o)

[expand/aggregate]

[exchange]
value = self().omit('bufferID')
; } END.

; BEGIN (expand someValuesFrom) {
[expand]
path = http://www.w3.org/2002/07/owl#someValuesFrom
;file = ./json-protege-resolver.ini ; inline statements, it's more verbose but it's self-sufficient
[expand/exploding]
[expand/combine]
path = value.@id
primer = env('bufferID')
prepend = buffers
persistent = true

[expand/combine/replace]
path = id
value = get('@id')
path = value
value = self().omit('bufferID')

[expand/replace]
path = id
value = get('id')
path = value
value = get('value.@id.value').mapValues((o) => Array.isArray(o) && o.length === 1 ? o.pop() : o)

[expand/aggregate]

[exchange]
value = self().omit('bufferID')
; } END.

; BEGIN (re-bufferize  all nodes, with there enrichments) {
[bufferize]
path = bufferID

[env]
path = bufferID
value = get('bufferID')
; } END.

; BEGIN (expand subClassOf) {
[expand]
path = http://www.w3.org/2000/01/rdf-schema#subClassOf
;file = ./json-protege-resolver.ini ; inline statements, it's more verbose but it's self-sufficient

[expand/exploding]
[expand/combine]
path = value.@id
primer = env('bufferID')
prepend = buffers
persistent = true

[expand/combine/replace]
path = id
value = get('@id')
path = value
value = self().omit('bufferID')

[expand/replace]
path = id
value = get('id')
path = value
value = get('value.@id.value').mapValues((o) => Array.isArray(o) && o.length === 1 ? o.pop() : o)

[expand/aggregate]

[exchange]
value = self().omit('bufferID')
; } END.


; BEGIN (Use prefix) {
[OBJFlatten]
safe = false

[OBJNamespaces]
prefix = dc:
namespace = http://purl.org/dc/terms/

prefix = dc:
namespace = http://purl.org/dc/elements/1.1/

prefix = place:
namespace = http://purl.org/ontology/places#

prefix = rdfs:
namespace = http://www.w3.org/2000/01/rdf-schema#

prefix = obo:
namespace = http://purl.obolibrary.org/obo/

prefix = swo:
namespace = http://www.ebi.ac.uk/swo/

prefix = swo:
namespace = http://www.ebi.ac.uk/efo/swo/

prefix = owl
namespace = http://www.w3.org/2002/07/owl#

prefix = inist:
namespace = http://www.inist.fr/Ontology#

prefix = skos:
namespace = http://www.w3.org/2004/02/skos/core#

prefix = ontoTM:
namespace = http://data.loterre.fr/ontoTM#

reference = (@id|@type)$

[OBJFlatten]
reverse = true
safe = false

; } END.

; BEGIN (Simplify arrays, fields hierachy) {
[assign]
path = rdfs:subClassOf
value = get('rdfs:subClassOf').reduce((obj, item) => ((obj[item['@id']] = item), obj), {})

[exchange]
value = self().omit('bufferID').mapValues((o) => Array.isArray(o) && o.length === 1 ? o.pop() : o)

[OBJFlatten]
; } END.


[remove]
reverse = true
test = get('rdfs:subClassOf/obo:IAO_0000594/@id').includes('obo:IAO_0000594')

# Ensures that each object contains an identification key (required by lodex)
[swing]
test = pick(['URI', 'uri']).pickBy(_.identity).isEmpty()
[swing/identify]

# Prevent keys from containing dot path notation (which is forbidden by nodejs mongoDB driver)
[OBJFlatten]
separator = fix('.')
reverse = true
safe = true

# Uncomment to see each data sent to the database
#[debug]

# Add contextual metadata related to the import
[assign]
path = lodexStamp.importedDate
value = fix(new Date()).thru(d => d.toDateString())
path = lodexStamp.usedParser
value = env('parser')
path = lodexStamp.uploadedFilename
value = env('source')
path = uri
value = get('uri').trim()

